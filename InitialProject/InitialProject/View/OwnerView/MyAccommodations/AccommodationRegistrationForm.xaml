<Page x:Class="InitialProject.View.OwnerView.MyAccommodations.AccommodationRegistrationForm"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:val="clr-namespace:InitialProject.Validation"
        xmlns:local="clr-namespace:InitialProject.View.OwnerView.MyAccommodations"
        xmlns:ns="clr-namespace:InitialProject.Utilities"
        mc:Ignorable="d"
        Title="AccommodationRegistrationForm" Height="637" Width="345">

    <Page.Background>
        <SolidColorBrush Color="lightgray" />
    </Page.Background>
    <Page.Resources>

        <!--LogIn button style-->
        <Style x:Key="ConfirmButtonStyle" TargetType="{x:Type Button}">

            <Setter Property="Background" Value="#3A3D55"/>
            <!-- set the button background color -->
            <Setter Property="Foreground" Value="#fff"/>
            <!-- set the text color of the button -->
            <Setter Property="FontSize" Value="20"/>
            <!-- set the font size of the button -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#005A9E"/>
                                <!-- set the background color when the mouse is over the button -->
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#004F8E"/>
                                <!-- set the background color when the button is pressed -->
                            </Trigger>

                            <!--Button blocked, validation-->
                            <DataTrigger Binding="{Binding ElementName=accommodationName, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"></Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=imagesUrlTextbox, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"></Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=MaxNumberOfGuests, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"></Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=MinimumReservationDays, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"></Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=CancelationPeriod, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"></Setter>
                            </DataTrigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!-- Flat ComboBox -->
        <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="#3A3D55" />
        <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#fff" />
        <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
        <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#3A3D55" />
        <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />

        <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="2" Name="Border"
              BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" 
              CornerRadius="0" BorderThickness="1, 1, 1, 1" 
              Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
                <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444" Name="ButtonBorder"
              CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
              Background="{StaticResource ComboBoxNormalBackgroundBrush}" />

                <Path Name="Arrow" Grid.Column="1" 
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
            HorizontalAlignment="Center" Fill="#444"
            VerticalAlignment="Center" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="False">
                    <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                    <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="ComboBoxFlatStyle"  TargetType="{x:Type ComboBox}">
            <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
            <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            <Setter Property="TextElement.Foreground" Value="Black"/>
            <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton Name="ToggleButton" Grid.Column="2"
                ClickMode="Press" Focusable="False"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                            <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"
                              HorizontalAlignment="Left" VerticalAlignment="Center"                              
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                            <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"                     
                     IsReadOnly="{TemplateBinding IsReadOnly}"
                     Visibility="Hidden" Background="Transparent"
                     HorizontalAlignment="Left" VerticalAlignment="Center"
                     Focusable="True" >
                                <TextBox.Template>
                                    <ControlTemplate TargetType="TextBox" >
                                        <Border Name="PART_ContentHost" Focusable="False" />
                                    </ControlTemplate>
                                </TextBox.Template>
                            </TextBox>
                            <!-- Popup showing items -->
                            <Popup Name="Popup" Placement="Bottom"
                   Focusable="False" AllowsTransparency="True"
                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   PopupAnimation="Slide">
                                <Grid Name="DropDown" SnapsToDevicePixels="True"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                    <Border Name="DropDownBorder" Background="White" Margin="0, 1, 0, 0"
                        CornerRadius="0" BorderThickness="1,1,1,1" 
                        BorderBrush="{StaticResource ComboBoxNormalBorderBrush}"/>
                                    <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="ItemsControl.IsGrouping" Value="True">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                            </Trigger>
                            <Trigger Property="ComboBox.IsEditable" Value="True">
                                <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                                <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                                <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- End of Flat ComboBox -->

        <!--Validation error template-->
        <ControlTemplate x:Key="ValidationErrorTemplate">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <AdornedElementPlaceholder Grid.Column="0" Grid.Row="0" x:Name="textBox"/>
                <TextBlock Grid.Column="0" Grid.Row="1" Text="{Binding [0].ErrorContent}" Foreground="Red"/>
            </Grid>
        </ControlTemplate>
        <!--End of Validation error template-->
    </Page.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="0.1*"></RowDefinition>
            <RowDefinition Height="0.1*"></RowDefinition>
            <RowDefinition></RowDefinition>
            <RowDefinition Height="0.2*"></RowDefinition>
        </Grid.RowDefinitions>

        <Button Grid.Row="0" Command="{Binding GoBackCommand}" Content="{ns:Loc Go_back}" Background="Transparent" BorderThickness="0" Foreground="#3A3D55" FontSize="16" HorizontalAlignment="Left" FontWeight="DemiBold"></Button>

        <TextBlock Grid.Row="1" Text="{ns:Loc Accommodation_registration}" Foreground="#3A3D55" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="25" FontWeight="DemiBold"/>

        <Grid Grid.Row="2">
            <StackPanel HorizontalAlignment="Center">
                <Label Content="{ns:Loc Name}"/>
                <TextBox x:Name="accommodationName" Margin="0,0,0,15" Height="30" Width="210" HorizontalAlignment="Left" TextAlignment="Center" FontSize="15">
                    <TextBox.Text>
                        <Binding Path="AccommodationName" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <val:EmptyStringValidation/>
                            </Binding.ValidationRules>

                        </Binding>
                    </TextBox.Text>
                    <Validation.ErrorTemplate>
                        <StaticResource ResourceKey="ValidationErrorTemplate" />
                    </Validation.ErrorTemplate>
                </TextBox>

                <StackPanel Margin="0,-10,0,15" Orientation="Horizontal">
                    <StackPanel Orientation="Vertical">
                        <Label Content="{ns:Loc Country}"/>
                        <ComboBox Style="{StaticResource ComboBoxFlatStyle}" x:Name="CountryComboBox" SelectedItem="{Binding Path=Country, UpdateSourceTrigger=PropertyChanged}"  ItemsSource="{Binding Path=Locations.Keys}" Height="30" Margin="0,0,10,0" Width="100"/>
                    </StackPanel>
                    <StackPanel Orientation="Vertical">
                        <Label Content="{ns:Loc City}"/>
                        <ComboBox Style="{StaticResource ComboBoxFlatStyle}" x:Name="CityComboBox" ItemsSource="{Binding Cities}" SelectedItem="{Binding Path=City, UpdateSourceTrigger=PropertyChanged}"  Width="100" Height="30"/>
                    </StackPanel>
                </StackPanel>

                <Label Content="{ns:Loc Accommodation_type}"/>
                <ComboBox Style="{StaticResource ComboBoxFlatStyle}" x:Name="accommodationType" SelectedValuePath="content" Text="{Binding Path=AccommodationTypes}" Margin="0,0,0,15" Height="30" Width="210" HorizontalAlignment="Left" FontSize="15">
                    <ComboBoxItem Content="house"/>
                    <ComboBoxItem Content="appartment"/>
                    <ComboBoxItem Content="cabin"/>
                </ComboBox>

                <Grid Margin="0,0,0,15">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0" Content="{ns:Loc Maximum_number_of_guests}"/>
                    <TextBox Grid.Column="1" x:Name="MaxNumberOfGuests" Height="30" TextAlignment="Center" FontSize="15" Margin="4,0,0,0">
                        <TextBox.Text>
                            <Binding Path="MaxGuests" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <val:PositiveNumberValidation/>
                                </Binding.ValidationRules>

                            </Binding>
                        </TextBox.Text>
                        <Validation.ErrorTemplate>
                            <StaticResource ResourceKey="ValidationErrorTemplate" />
                        </Validation.ErrorTemplate>
                    </TextBox>
                </Grid>
                <Grid Margin="0,0,0,15">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0" Content="{ns:Loc Minimum_renovation_days}"/>
                    <TextBox x:Name="MinimumReservationDays" Margin="166,0,0,15" Height="30" Width="44" HorizontalAlignment="Left" TextAlignment="Center" FontSize="15">
                        <TextBox.Text>
                            <Binding Path="MinReservationDays" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <val:PositiveNumberValidation/>
                                </Binding.ValidationRules>

                            </Binding>
                        </TextBox.Text>
                        <Validation.ErrorTemplate>
                            <StaticResource ResourceKey="ValidationErrorTemplate" />
                        </Validation.ErrorTemplate>
                    </TextBox>
                </Grid>
                <Grid Margin="0,0,0,15">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0" Content="{ns:Loc Cancelation_period}"/>
                    <TextBox x:Name="CancelationPeriod"  Margin="166,0,0,15" Height="30" Width="44" HorizontalAlignment="Left" TextAlignment="Center" FontSize="15">
                        <TextBox.Text>
                            <Binding Path="CancelationPeriod" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <val:PositiveNumberValidation/>
                                </Binding.ValidationRules>

                            </Binding>
                        </TextBox.Text>
                        <Validation.ErrorTemplate>
                            <StaticResource ResourceKey="ValidationErrorTemplate" />
                        </Validation.ErrorTemplate>
                    </TextBox>

                </Grid>
                <Label Content="{ns:Loc Images_url}"></Label>
                <TextBox x:Name="imagesUrlTextbox"  Margin="0,0,0,15" Height="30" Width="210" HorizontalAlignment="Left" TextAlignment="Center" FontSize="15">
                    <TextBox.Text>
                        <Binding Path="ImagesUrl" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <val:ImagesUrlValidation/>
                                <val:EmptyStringValidation/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                    <Validation.ErrorTemplate>
                        <StaticResource ResourceKey="ValidationErrorTemplate" />
                    </Validation.ErrorTemplate>
                </TextBox>
            </StackPanel>


        </Grid>

        <Button Grid.Row="3" Command="{Binding ConfirmRegistrationCommand}" Content="{ns:Loc Confirm}" Margin="50, 0, 50, 40" Style="{StaticResource ConfirmButtonStyle}">

        </Button>

    </Grid>
</Page>

