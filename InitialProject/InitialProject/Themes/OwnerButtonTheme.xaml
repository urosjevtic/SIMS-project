<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="Background" Value="{DynamicResource ObjectsBackgroundColor}"/>
            <!-- set the button background color -->
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorLighter}"/>
            <!-- set the text color of the button -->
            <Setter Property="FontSize" Value="20"/>
            <!-- set the font size of the button -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseOver}"/>
                                <!-- set the background color when the mouse is over the button -->
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseClick}"/>
                                <!-- set the background color when the button is pressed -->
                            </Trigger>


                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



    <!--Main Menu button style-->
    <Style x:Key="MainPageButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ObjectsBackgroundColor}"/>
        <!-- set the button background color -->
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorLighter}"/>
        <!-- set the text color of the button -->
        <Setter Property="FontSize" Value="20"/>
        <!-- set the font size of the button -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Rectangle x:Name="PART_ClickEffect" Opacity="0" Fill="{DynamicResource ClickParticalEffect}" />
                            <ContentPresenter HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_ClickEffect" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsMouseCaptured" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_ClickEffect"
                                                             Storyboard.TargetProperty="Opacity"
                                                             From="1.0" To="0.0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Accommodation registration confirm button-->
    <Style x:Key="ConfirmRegistrationButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="Background" Value="{DynamicResource ObjectsBackgroundColor}"/>
        <!-- set the button background color -->
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorLighter}"/>
        <!-- set the text color of the button -->
        <Setter Property="FontSize" Value="20"/>
        <!-- set the font size of the button -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseOver}"/>
                            <!-- set the background color when the mouse is over the button -->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseClick}"/>
                            <!-- set the background color when the button is pressed -->
                        </Trigger>

                        <!--Button blocked, validation-->
                        <DataTrigger Binding="{Binding ElementName=accommodationName, Path=(Validation.HasError)}" Value="True">
                            <Setter Property="IsEnabled" Value="False"></Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=imagesUrlTextbox, Path=(Validation.HasError)}" Value="True">
                            <Setter Property="IsEnabled" Value="False"></Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=MaxNumberOfGuests, Path=(Validation.HasError)}" Value="True">
                            <Setter Property="IsEnabled" Value="False"></Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=MinimumReservationDays, Path=(Validation.HasError)}" Value="True">
                            <Setter Property="IsEnabled" Value="False"></Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=CancelationPeriod, Path=(Validation.HasError)}" Value="True">
                            <Setter Property="IsEnabled" Value="False"></Setter>
                        </DataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Naslovi-->
    <Style x:Key="TitleStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <!--Confirm button style-->

    <Style x:Key="ConfirmButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="Background" Value="{DynamicResource ObjectsBackgroundColor}" />
        <!--  set the button background color  -->
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorLighter}" />
        <!--  set the text color of the button  -->
        <Setter Property="FontSize" Value="20" />
        <!--  set the font size of the button  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseOver}" />
                            <!--  set the background color when the mouse is over the button  -->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseClick}" />
                            <!--  set the background color when the button is pressed  -->
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Rate a guest button-->
    <Style x:Key="RateGuestButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ObjectsBackgroundColor}" />
        <!--  set the button background color  -->
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorLighter}" />
        <!--  set the text color of the button  -->
        <Setter Property="FontSize" Value="20" />
        <!--  set the font size of the button  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseOver}" />
                            <!--  set the background color when the mouse is over the button  -->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseClick}" />
                            <!--  set the background color when the button is pressed  -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Renovation report-->
    <Style x:Key="RenovationReportButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="Background" Value="{DynamicResource ObjectsBackgroundColor}"/>
        <!-- set the button background color -->
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorLighter}"/>
        <!-- set the text color of the button -->
        <Setter Property="FontSize" Value="20"/>
        <!-- set the font size of the button -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseOver}"/>
                            <!-- set the background color when the mouse is over the button -->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseClick}"/>
                            <!-- set the background color when the button is pressed -->
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsAbleToCancel}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Renovation submit-->
    <Style x:Key="RenovationSubmitButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="Background" Value="{DynamicResource ObjectsBackgroundColor}"/>
        <!-- set the button background color -->
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorLighter}"/>
        <!-- set the text color of the button -->
        <Setter Property="FontSize" Value="20"/>
        <!-- set the font size of the button -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseOver}"/>
                            <!-- set the background color when the mouse is over the button -->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseClick}"/>
                            <!-- set the background color when the button is pressed -->
                        </Trigger>

                        <!--Button blocked, validation-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=renovationDescription, Path=(Validation.HasError)}" Value="True"/>
                                <Condition Binding="{Binding ElementName=selectedAvailableDate, Path=(Validation.HasError)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsEnabled" Value="False"/>
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--All reservations button style-->
    <Style x:Key="AllReservationButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ObjectsBackgroundColor}"/>
        <!-- set the button background color -->
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorLighter}"/>
        <!-- set the text color of the button -->
        <Setter Property="FontSize" Value="20"/>
        <!-- set the font size of the button -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseOver}"/>
                            <!-- set the background color when the mouse is over the button -->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseClick}"/>
                            <!-- set the background color when the button is pressed -->
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsAbleToCancel}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>



    <Style x:Key="AddImageButtonStyle" TargetType="Button">
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="30" />
        <Setter Property="Margin" Value="5,0,0,15" />
        <Setter Property="Command" Value="{Binding AddUrlToListCommand}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Ellipse x:Name="BackgroundEllipse" Fill="{DynamicResource ObjectsBackgroundColor}" Stroke="{DynamicResource ForegroundColorLighter}" StrokeThickness="1" />
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundEllipse" Property="Fill" Value="{DynamicResource ButtonMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BackgroundEllipse" Property="Fill" Value="{DynamicResource ButtonMouseClick}" />
                        </Trigger>

                        <!--Button blocked, validation-->
                        <DataTrigger Binding="{Binding ElementName=imagesUrlTextbox, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"></Setter>
                            </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Content">
            <Setter.Value>
                <TextBlock FontSize="16" FontWeight="Bold" Foreground="{DynamicResource ForegroundColorLighter}">+</TextBlock>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>